import React, { Component } from 'react';
import {
    Text,
    View,
    FlatList,
    TouchableOpacity,
    ScrollView,
    LayoutAnimation,
    Platform,
    UIManager,
    Animated, Dimensions, StyleSheet
} from 'react-native';
import {
    Container,
    Content,
    Button,
    Icon,
    Title,
    Header,
    Body,
    Left,
    Right,
    Input,
    Item,
    Picker,
    Toast, ListItem, Radio
} from 'native-base';
import I18n from "ex-react-native-i18n";
const width = Dimensions.get('window').width;
import axios from "axios";
import Modal from "react-native-modal";
import {profile} from "../actions";
import Tabs from "./Tabs";
import {connect} from "react-redux";
import {NavigationEvents} from "react-navigation";
import styles from '../../assets/style'
import CONST from '../consts';
import {Image} from "react-native-expo-image-cache";
const preview = { uri: ""}
import ShimmerPlaceHolder from "react-native-shimmer-placeholder";
import * as Animatable from "react-native-animatable";
// import Spinner from "react-native-loading-spinner-overlay";
const isIOS = Platform.OS === 'ios';

class Categories extends Component {
    constructor(props) {
        super(props);
        this.state = {
            lang            : this.props.lang,
            name            : '',
            sub_category_id : null,
            selected_id     : null,
            spinner         : true,
            loader          : false,
            sub_categories  : [],
            category_id     : this.props.navigation.state.params.category_id,
            blogs           : [],
            countries       : [],
            cities          : [],
            country_id      : null,
            city_id         : null,
            latitude        : null,
            city            : null,
            page            : 0,
            longitude       : null,
            isSearch        : false,
            filter          : false,
            parents         : [],
            expanded        : false,
            pressed         : [],
            years           : [],
            year            : null,

        };

        if (Platform.OS === 'android') {
            UIManager.setLayoutAnimationEnabledExperimental(true);
        }

    }

    changeLayout = (index) => {
        LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
        let pressArray     = this.state.pressed
        pressArray[index]  = pressArray[index] ? false : true
        this.setState({ pressed: pressArray })
    };

    childes (parents) {
        return (
            parents.map((item, index) => {
                return (
                    //(item.childes.length > 0)?
                    <View
                        key={item.id}
                        style={{
                            justifyContent: 'center',
                            marginVertical:  3
                        }}>
                        <TouchableOpacity activeOpacity={0.8} onPress={() => {
                            this.changeLayout(item.id);

                        }}
                                          style={{
                                              margin: 8,
                                              borderWidth: .5,
                                              borderColor: '#bbb'
                                          }}>
                            {
                                (item.childes.length > 0)
                                    ?
                                    <TouchableOpacity style={{ flexDirection:  'row'  ,justifyContent :'space-between' }}
                                                      onPress={()=> {
                                                          this.filterIt(item.id)
                                                          this.changeLayout(item.id);
                                                      }}>
                                        <Icon name={this.state.pressed[item.id] ? 'arrowup' : 'arrowdown'} type={'AntDesign'}
                                              style={{fontSize: 12, lineHeight: 20, fontFamily: 'CairoBold', padding: 10}} />

                                        <Text   style={{fontSize: 12, fontFamily: 'CairoBold', padding: 8   }}>{item.name}</Text>
                                    </TouchableOpacity>
                                    :
                                    <TouchableOpacity onPress={()=> {
                                        this.filterIt(item.id)
                                        this.changeLayout(item.id);
                                    }}

                                                      style={[ ]}>
                                        <Text  onPress={()=> {this.filterIt(item.id)}} style={{fontSize: 12, fontFamily: 'CairoBold', padding: 8,alignSelf:  'flex-end'}}>{item.name}</Text>
                                    </TouchableOpacity>
                            }
                        </TouchableOpacity>
                        <View style={{height: this.state.pressed[item.id] ? null : 0, overflow: 'hidden'}}>
                            {
                                item.childes.map((result) => {
                                    return (

                                        <View style={styles.flex}>
                                            {

                                                (result.childes.length > 0 )?
                                                    this.childes([result])
                                                    :
                                                    <Animatable.View animation="zoomIn" easing="ease-out" delay={500}>
                                                        <ListItem key={result.id} onPress={() => {
                                                            this.filterIt(result.id)
                                                        }}>
                                                            <Left>
                                                                <TouchableOpacity onPress={()=> {this.filterIt(result.id)}}>
                                                                    <Text style={{fontSize: 10, fontFamily: 'CairoBold' }}>{result.name}</Text>
                                                                </TouchableOpacity>
                                                            </Left>
                                                            <Right>
                                                                <TouchableOpacity onPress={()=> {this.filterIt(result.id)}}>
                                                                    <Radio
                                                                        selected={this.state.selected_id ===result.id ? true : false}/>
                                                                </TouchableOpacity>
                                                            </Right>
                                                        </ListItem>
                                                    </Animatable.View>
                                            }
                                        </View>
                                    )
                                })
                            }
                        </View>
                    </View>
                )
            })
        )
    }

    filterIt(id){
        this.setState({selected_id : id, spinner: true,blogs: [],page:0});
        axios.post(`${CONST.url}get-blogs`, {
            category_id      : id,
            model : this.state.year
        }).then( (response)=> {
            this.setState({
                blogs   :  response.data.data,
                spinner : false
            })
            if (response.data.data.length == 0){
                // Toast.show({
                //     text: I18n.t('no_results'),
                //     duration: 2000,
                //     type: "danger",
                //     textStyle: {
                //         color: "white",
                //         fontFamily: 'CairoRegular',
                //         textAlign: 'center'
                //     }
                // });
                CONST.showToast(I18n.t('no_results'),'danger')

            }
        }).catch(e => {
            this.setState({ spinner : false})
        })
    }

    allBlogs(){
        if(this.state.loader === false){
            this.setState({
                page            :  this.state.page + 1
            }, ()=> {
                axios.post(`${CONST.url}category_children`, {
                    id          :  this.props.navigation.state.params.category_id,
                    page        :  this.state.page
                }).then( (response)=> {
                    this.setState({
                        blogs   :  this.state.blogs.concat(response.data.data),
                        spinner : false,
                        loader  : response.data.data.length === 0 ? true :false,
                    });

                }).catch(e => {
                    this.setState({ spinner : false})
                })
            });
        }
    }

    onFocus() {
        this.runPlaceHolder();
        this.componentWillMount();
    }

    async componentWillMount() {

        for(let i = 2020; i > 1990 ; i--){
            this.state.years.push(JSON.stringify(i));
        }

        this.allBlogs();

        axios.post(`${CONST.url}categoriesList`, {
            lang: this.props.lang ,
            parent_id : this.props.navigation.state.params.category_id
        }).then( (response)=> {
            this.setState({parents: response.data.data,spinner: false});
        }).catch(e => {
            this.setState({ spinner : false})
        })

    }

    onSearch(){
        this.setState({filter: !this.state.filter});
    }

    more(){
        this.allBlogs()
    }

    onValueYear(value) {

        this.setState({
            year        : value,
            blogs       : [],
            page        : 0
        });

        axios.post(`${CONST.url}get-blogs`, {
            category_id      : this.props.navigation.state.params.category_id,
            model            : value
        }).then( (response)=> {
            this.setState({
                blogs   :  response.data.data,
                spinner : false
            });
            if (response.data.data.length == 0){
                // Toast.show({
                //     text: I18n.t('no_results'),
                //     duration: 2000,
                //     type: "danger",
                //     textStyle: {
                //         color: "white",
                //         fontFamily: 'CairoRegular',
                //         textAlign: 'center'
                //     }
                // });
                CONST.showToast(I18n.t('no_results'),'danger')

            }
        }).catch((e=>{
            this.setState({
                spinner : false
            });
        }))

    }

    noResults() {
        return (
            <View style={[ styles.no_data ,{flexGrow : 1 } ]}>
                <Text style={[ styles.textRegular, styles.textSize_20, styles.text_red ]}>
                    {I18n.t('no_results')}
                </Text>
            </View>
        );
    }

    _renderItem = ({item ,key}) => (
        <View style={[ styles.overHidden ]}>
            <Animatable.View animation="fadeInUp" easing="ease-out" delay={400}>
                <TouchableOpacity
                    onPress={() => {this.props.navigation.navigate('details',{ blog_id : item.id})} }
                    key={ key }
                    style={[ styles.rowGroup, styles.paddingHorizontal_5, styles.Border_Btn_Opc_Gray, styles.paddingVertical_5 ]}
                >
                    <View style={[ styles.flex_30, styles.height_80 ]}>
                        <Image style={[styles.Radius_5,  styles.Width_100, styles.heightFull, styles.Border, styles.borderOpcityGray]}  {...{preview, uri : item.img}}  />
                    </View>
                    <View style={[ styles.paddingHorizontal_10, styles.flex_70 ]}>
                        <View  onPress={() => {this.props.navigation.navigate('details',{ blog_id : item.id})} }>
                            <Text style={[styles.info, styles.textBold , { color : '#676767'}]}>{item.title}</Text>
                            <View style={styles.icon_text}>
                                <Text style={[styles.info, styles.textBold, styles.textSize_14, styles.text_red]}>{item.price}</Text>
                            </View>
                            <View style={[ styles.rowGroup ]} >
                                <View style={styles.icon_text}>
                                    <Icon style={[styles.textSize_11, styles.text_gray]} active type="Feather" name='map-pin'/>
                                    <Text style={[styles.textSize_13, styles.textRegular, styles.text_gray, styles.marginHorizontal_5 ]}>{item.country}</Text>
                                </View>
                                <View style={[styles.icon_text, {alignSelf: 'flex-end'}]} >
                                    <Icon style={[styles.textSize_11, styles.text_gray ]} active type="Feather" name='clock'/>
                                    <Text style={[styles.textSize_13, styles.textRegular, styles.text_gray, styles.marginHorizontal_5 ]}>{item.date}</Text>
                                </View>
                            </View>
                        </View>
                    </View>
                </TouchableOpacity>
            </Animatable.View>
        </View>
    );

    _keyExtractor = (item, index) => item.id;

    render() {

        this.loadingAnimated = [];

        return (
            <Container>

                <NavigationEvents onWillFocus={() => this.onFocus()} />
                {/*<Spinner visible={this.state.spinner}/>*/}

                <Header style={styles.Header_Up}>
                    <Left style={[styles.RightDir]}>
                        <Button transparent onPress={()=> this.props.navigation.goBack()} >
                            <Icon style={styles.icons} type="AntDesign" name={ (this.state.lang !== 'ar' || this.state.lang == null) ? 'left' : 'right' }/>
                        </Button>
                    </Left>
                    <Body style={[styles.body_header, styles.flexCenter]}>
                        <Title style={styles.headerTitle}>{this.props.navigation.state.params.name}</Title>
                    </Body>
                    <Right style={[ styles.RightDir ]}>
                        <Button style={styles.botn} transparent onPress={()=> { this.onSearch() }}>
                            <Icon style={[styles.icon_header,{color : '#fff'}]} type="AntDesign" name='filter' />
                        </Button>
                    </Right>
                </Header>
                <Content contentContainerStyle={[ styles.bgFullWidth ]} >

                    {
                        (this.props.navigation.state.params.category_id == 61) ?
                            <View style={[ styles.paddingHorizontal_10 ]}>
                                <Item style={[ styles.itemPiker_second, styles.marginVertical_10 ]} regular>
                                    <Icon style={[ styles.iconPicker ]} name='down' type="AntDesign"/>
                                    <Picker
                                        iosHeader={I18n.translate('choose_model')}
                                        headerBackButtonText={I18n.translate('goBack')}
                                        mode="dropdown"
                                        placeholder={I18n.translate('choose_model')}
                                        placeholderStyle={{ color: "#444", writingDirection: 'rtl', width : '100%',fontFamily : 'CairoRegular' }}
                                        placeholderIconColor="#444"
                                        style={{backgroundColor:'transparent',color: '#444', width : '100%', writingDirection: 'rtl',fontFamily : 'CairoRegular'}}
                                        selectedValue={this.state.year}
                                        itemTextStyle={{ color: '#444', width : '100%', writingDirection: 'rtl',fontFamily : 'CairoRegular' }}
                                        textStyle={{ color: "#444" , width : '100%', writingDirection: 'rtl',fontFamily : 'CairoRegular',paddingLeft : 5, paddingRight: 5 }}
                                        onValueChange={this.onValueYear.bind(this)}>

                                        <Picker.Item style={styles.itemPicker} label={I18n.translate('choose_model')} value={null} />

                                        {
                                            this.state.years.map((year, i) => (
                                                <Picker.Item style={styles.itemPicker} key={i} label={year} value={year} />
                                            ))
                                        }
                                    </Picker>
                                </Item>
                            </View>
                            :
                            null
                    }

                    { (this.state.blogs.length === 0) ? this.noResults() : null}

                    {
                        this.state.spinner ?

                            this._renderRows(this.loadingAnimated, 5, '5rows')

                            :

                            <FlatList
                                data={this.state.blogs}
                                style={[styles.flatList]}
                                keyExtractor={this._keyExtractor}
                                onEndReachedThreshold={isIOS ? .01 : 1}
                                key={this.state.render}
                                extraData={this.state}
                                renderItem={  this._renderItem}
                                onEndReached={this.more.bind(this)}
                                numColumns = { this.state.render }
                            />
                    }

                </Content>

                <Tabs routeName="Categories" navigation={this.props.navigation}/>

                <Modal
                    onBackdropPress                = {() => this.setState({ filter: false })}
                    isVisible                      = {this.state.filter}
                    animationIn                    = {'slideInLeft'}
                    animationOut                   = {'slideOutLeft'}
                    animationInTiming              = {200}
                    // swipeDirection                 = 'left'
                    // onSwipeComplete                = {() => this.setState({filter: false})}
                    style                          = {[ styles.Width_100, styles.heightFull ]}
                >

                    <ScrollView style={[styles.filter_scroll_model , styles.heightFull]}>
                        <View style={[styles.filter_model]}>
                            <Text style={[styles.text_headers2 , {color : CONST.color}]}>{I18n.translate('aes')}</Text>
                            {
                                this.childes(  this.state.parents )
                            }
                        </View>
                    </ScrollView>

                </Modal>
            </Container>
        );
    }

    _renderRows(loadingAnimated, numberRow, uniqueKey) {
        let shimmerRows = [];
        for (let index = 0; index < numberRow; index++) {
            shimmerRows.push(
                <ShimmerPlaceHolder
                    key={`loading-${index}-${uniqueKey}`}
                    ref={(ref) => loadingAnimated.push(ref)}
                    style={{marginVertical: 7, alignSelf: 'center'}}
                    width={width - 20}
                    height={100}
                    colorShimmer={['#ffffff75', '#f2f0ff', '#ffffff75']}
                />
            )
        }
        return (
            <View>
                {shimmerRows}
            </View>
        )
    }

    runPlaceHolder() {
        if (Array.isArray(this.loadingAnimated) && this.loadingAnimated.length > 0) {
            Animated.parallel(
                this.loadingAnimated.map(animate => {
                    if (animate&&animate.getAnimated) {
                        return animate.getAnimated();
                    }
                    return null;
                }),
                {
                    stopTogether: false,
                }
            ).start(() => {
                this.runPlaceHolder();
            })
        }
    }
}

const mapStateToProps = ({ auth, lang ,profile}) => {
    return {

        auth   : auth.user,
        lang   : lang.lang,
        user   : profile.user,
    };
};
export default connect(mapStateToProps,{profile})(Categories);
